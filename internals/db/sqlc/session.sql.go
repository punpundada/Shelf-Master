// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: session.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteSessionByUserId = `-- name: DeleteSessionByUserId :one
DELETE FROM sessions where user_id = $1 RETURNING user_id
`

func (q *Queries) DeleteSessionByUserId(ctx context.Context, userID int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteSessionByUserId, userID)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const getSessionById = `-- name: GetSessionById :one
SELECT id, user_id, expires_at, fresh FROM sessions WHERE id = $1
`

func (q *Queries) GetSessionById(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionById, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExpiresAt,
		&i.Fresh,
	)
	return i, err
}

const saveSession = `-- name: SaveSession :one
INSERT INTO sessions (
    id,user_id,expires_at
) VALUES ($1, $2,$3) RETURNING id, user_id, expires_at, fresh
`

type SaveSessionParams struct {
	ID        string           `json:"id"`
	UserID    int32            `json:"user_id"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) SaveSession(ctx context.Context, arg SaveSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, saveSession, arg.ID, arg.UserID, arg.ExpiresAt)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExpiresAt,
		&i.Fresh,
	)
	return i, err
}

const updateSessionById = `-- name: UpdateSessionById :one
UPDATE sessions SET expires_at = $1 , fresh = $2
WHERE id = $3
RETURNING id, user_id, expires_at, fresh
`

type UpdateSessionByIdParams struct {
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
	Fresh     pgtype.Bool      `json:"fresh"`
	ID        string           `json:"id"`
}

func (q *Queries) UpdateSessionById(ctx context.Context, arg UpdateSessionByIdParams) (Session, error) {
	row := q.db.QueryRow(ctx, updateSessionById, arg.ExpiresAt, arg.Fresh, arg.ID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExpiresAt,
		&i.Fresh,
	)
	return i, err
}
