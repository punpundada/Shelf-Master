// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: rest_password.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteRestPasswordByUserId = `-- name: DeleteRestPasswordByUserId :exec
DELETE FROM rest_password WHERE user_id = $1
`

func (q *Queries) DeleteRestPasswordByUserId(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteRestPasswordByUserId, userID)
	return err
}

const getResetPasswordFromTokenHash = `-- name: GetResetPasswordFromTokenHash :one
SELECT token_hash, user_id, expires_at FROM rest_password where token_hash = $1
`

func (q *Queries) GetResetPasswordFromTokenHash(ctx context.Context, tokenHash pgtype.Text) (RestPassword, error) {
	row := q.db.QueryRow(ctx, getResetPasswordFromTokenHash, tokenHash)
	var i RestPassword
	err := row.Scan(&i.TokenHash, &i.UserID, &i.ExpiresAt)
	return i, err
}

const savePasswordRestToken = `-- name: SavePasswordRestToken :one
INSERT INTO rest_password(token_hash,user_id,expires_at) values($1,$2,$3) RETURNING token_hash, user_id, expires_at
`

type SavePasswordRestTokenParams struct {
	TokenHash pgtype.Text `json:"token_hash"`
	UserID    int32       `json:"user_id"`
	ExpiresAt pgtype.Date `json:"expires_at"`
}

func (q *Queries) SavePasswordRestToken(ctx context.Context, arg SavePasswordRestTokenParams) (RestPassword, error) {
	row := q.db.QueryRow(ctx, savePasswordRestToken, arg.TokenHash, arg.UserID, arg.ExpiresAt)
	var i RestPassword
	err := row.Scan(&i.TokenHash, &i.UserID, &i.ExpiresAt)
	return i, err
}
