// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: email_verification.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteEmailVerificationByUserId = `-- name: DeleteEmailVerificationByUserId :one
DELETE FROM email_verification WHERE user_id = $1 RETURNING id
`

func (q *Queries) DeleteEmailVerificationByUserId(ctx context.Context, userID int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteEmailVerificationByUserId, userID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteFromEmailVerificationByUserId = `-- name: DeleteFromEmailVerificationByUserId :one
DELETE FROM email_verification where user_id = $1 RETURNING id
`

func (q *Queries) DeleteFromEmailVerificationByUserId(ctx context.Context, userID int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteFromEmailVerificationByUserId, userID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getEmailVerificationByUserId = `-- name: GetEmailVerificationByUserId :one
SELECT id, code, user_id, email, expires_at FROM email_verification where user_id = $1
`

func (q *Queries) GetEmailVerificationByUserId(ctx context.Context, userID int32) (EmailVerification, error) {
	row := q.db.QueryRow(ctx, getEmailVerificationByUserId, userID)
	var i EmailVerification
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.UserID,
		&i.Email,
		&i.ExpiresAt,
	)
	return i, err
}

const saveEmailVerification = `-- name: SaveEmailVerification :one
INSERT INTO email_verification (
    code,user_id,email,expires_at
) values ($1,$2,$3,$4) RETURNING id, code, user_id, email, expires_at
`

type SaveEmailVerificationParams struct {
	Code      string      `json:"code"`
	UserID    int32       `json:"user_id"`
	Email     string      `json:"email"`
	ExpiresAt pgtype.Date `json:"expires_at"`
}

func (q *Queries) SaveEmailVerification(ctx context.Context, arg SaveEmailVerificationParams) (EmailVerification, error) {
	row := q.db.QueryRow(ctx, saveEmailVerification,
		arg.Code,
		arg.UserID,
		arg.Email,
		arg.ExpiresAt,
	)
	var i EmailVerification
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.UserID,
		&i.Email,
		&i.ExpiresAt,
	)
	return i, err
}
