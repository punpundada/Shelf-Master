// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAdmin = `-- name: CreateAdmin :one
UPDATE users
    SET role = 'ADMIN' WHERE id = $1 RETURNING id
`

func (q *Queries) CreateAdmin(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, createAdmin, id)
	err := row.Scan(&id)
	return id, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, name, mobile_number, role, created_at, updated_at, email_verified FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Name,
		&i.MobileNumber,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EmailVerified,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, password_hash, name, mobile_number, role, created_at, updated_at, email_verified FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Name,
		&i.MobileNumber,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EmailVerified,
	)
	return i, err
}

const saveUser = `-- name: SaveUser :one
INSERT INTO users (
    name,mobile_number,email,password_hash
) VALUES ($1,$2,$3,$4) RETURNING id, email, password_hash, name, mobile_number, role, created_at, updated_at, email_verified
`

type SaveUserParams struct {
	Name         string      `json:"name"`
	MobileNumber pgtype.Text `json:"mobile_number"`
	Email        string      `json:"email"`
	PasswordHash string      `json:"password_hash"`
}

func (q *Queries) SaveUser(ctx context.Context, arg SaveUserParams) (User, error) {
	row := q.db.QueryRow(ctx, saveUser,
		arg.Name,
		arg.MobileNumber,
		arg.Email,
		arg.PasswordHash,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Name,
		&i.MobileNumber,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EmailVerified,
	)
	return i, err
}

const updateUserPasswordByUserId = `-- name: UpdateUserPasswordByUserId :one
UPDATE users
    set password_hash = $1 RETURNING id
`

func (q *Queries) UpdateUserPasswordByUserId(ctx context.Context, passwordHash string) (int32, error) {
	row := q.db.QueryRow(ctx, updateUserPasswordByUserId, passwordHash)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateUsersEmail_verification = `-- name: UpdateUsersEmail_verification :one
UPDATE users
    set email_verified = $1 WHERE id = $2 RETURNING id
`

type UpdateUsersEmail_verificationParams struct {
	EmailVerified pgtype.Bool `json:"email_verified"`
	ID            int32       `json:"id"`
}

func (q *Queries) UpdateUsersEmail_verification(ctx context.Context, arg UpdateUsersEmail_verificationParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateUsersEmail_verification, arg.EmailVerified, arg.ID)
	var id int32
	err := row.Scan(&id)
	return id, err
}
